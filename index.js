require("dotenv").config();
const express = require("express");
const { Telegraf, Markup } = require("telegraf");
const { Telegraf, Markup } = require("telegraf");
const mongoose = require("mongoose");
const moment = require("moment");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();
app.use(express.json());

const ADMIN_ID = process.env.ADMIN_ID;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
	.then(() => console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω"))
	.catch(err => console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err));

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const User = mongoose.model("User", new mongoose.Schema({
	telegramId: String,
	name: String,
	age: Number,
}));

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const userStates = {};
const pendingDeletes = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö —É–¥–∞–ª–µ–Ω–∏–π

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–æ—Ç–æ–≤
bot.start(async (ctx) => {
	const userId = ctx.from.id;

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
	if (ctx.from.is_bot) {
		return ctx.reply("‚õîÔ∏è –ë–æ—Ç—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.");
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–æ—Ç
	await ctx.reply(
		"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç.",
		Markup.inlineKeyboard([
			[Markup.button.callback("‚úÖ –Ø –Ω–µ –±–æ—Ç", "confirm_not_bot")],
		])
	);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async (ctx) => {
	const userId = ctx.from.id;
	const data = ctx.callbackQuery.data;

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ø –Ω–µ –±–æ—Ç"
	if (data === "confirm_not_bot") {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞
		await ctx.editMessageText(
			"üòä –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
			Markup.inlineKeyboard([
				[Markup.button.callback("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "start_registration")],
				[Markup.button.callback("üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π", "show_rules")]
			])
		);
		return;
	}

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
	if (data === "show_rules") {
		await ctx.answerCbQuery();

		const sentMessage = await ctx.reply(
			"üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π:\n" +
			"1. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n" +
			"2. –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.\n" +
			"3. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —á–∏—Ç–µ—Ä—Å—Ç–≤–æ –∏ –∞–≥—Ä–µ—Å—Å–∏—è.\n" +
			"4. –£—á–∞—Å—Ç–≤—É–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!"
		);

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
		userStates[userId] = {
			...(userStates[userId] || {}),
			rulesMessageId: sentMessage.message_id,
		};
		return;
	}

	// –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

	if (data === "start_registration") {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
		if (userStates[userId]?.rulesMessageId) {
			try {
				await ctx.deleteMessage(userStates[userId].rulesMessageId);
			} catch (e) {
				console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:", e.message);
			}
		}

		userStates[userId] = { step: "name" };
		await ctx.editMessageText("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
		ctx.answerCbQuery();
		return;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if (data.startsWith("confirm_")) {
		const userIdToDelete = data.split("confirm_")[1]; // –ü–æ–ª—É—á–∞–µ–º _id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		const user = await User.findById(userIdToDelete); // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ _id

		if (!user) {
			ctx.answerCbQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			return;
		}

		pendingDeletes[userId] = { userIdToDelete, name: user.name };

		await ctx.editMessageText(
			`‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüë§ ${user.name} (${user.telegramId})?`,
			Markup.inlineKeyboard([
				Markup.button.callback("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", `delete_confirmed_${userIdToDelete}`),
				Markup.button.callback("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", "cancel")
			])
		);

		ctx.answerCbQuery();
		return;
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if (data.startsWith("delete_confirmed_")) {
		const userIdToDelete = data.split("delete_confirmed_")[1];
		const user = await User.findById(userIdToDelete); // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ _id

		if (!user) {
			ctx.answerCbQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			return;
		}

		const result = await User.deleteOne({ _id: userIdToDelete });
		if (result.deletedCount === 0) {
			await ctx.editMessageText("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.");
		} else {
			await ctx.editMessageText(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} —É–¥–∞–ª—ë–Ω.`);

			const time = moment().format("YYYY-MM-DD HH:mm");
			const adminUsername = ctx.from.username || `ID ${ctx.from.id}`;
			await bot.telegram.sendMessage(ADMIN_ID,
				`üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω:\n` +
				`üë§ –ò–º—è: ${user.name}\n` +
				`üÜî Telegram ID: ${user.telegramId}\n` +
				`üëÆ –£–¥–∞–ª–∏–ª: @${adminUsername}\n` +
				`üïí –í—Ä–µ–º—è: ${time}`
			);
		}

		ctx.answerCbQuery();
		return;
	}

	// –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
	if (data === "cancel") {
		await ctx.editMessageText("‚ùé –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
		ctx.answerCbQuery("‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ");
		return;
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (ctx) => {
	const userId = ctx.from.id;
	const message = ctx.message.text.trim();

	// –ö–æ–º–∞–Ω–¥–∞ /list ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
	if (message === "/list") {
		if (userId.toString() !== ADMIN_ID) {
			ctx.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.");
			return;
		}

		const users = await User.find();
		if (users.length === 0) {
			ctx.reply("üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.");
			return;
		}

		for (const user of users) {
			await ctx.reply(
				`üÜî ${user.telegramId}\nüë§ ${user.name}, ${user.age} –ª–µ—Ç`,
				Markup.inlineKeyboard([
					Markup.button.callback("‚ùå –£–¥–∞–ª–∏—Ç—å", `confirm_${user._id}`) // –ò—Å–ø–æ–ª—å–∑—É–µ–º _id –≤–º–µ—Å—Ç–æ telegramId
				])
			);
		}
		return;
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—à—ë–ª –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É "–Ø –Ω–µ –±–æ—Ç"
	if (!userStates[userId] || !userStates[userId].step) {
		ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç.");
		return;
	}

	// –®–∞–≥ 1: –∏–º—è
	if (userStates[userId].step === "name") {
		userStates[userId].name = message;
		userStates[userId].step = "age";
		ctx.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
	}

	// –®–∞–≥ 2: –≤–æ–∑—Ä–∞—Å—Ç
	else if (userStates[userId].step === "age") {
		const age = parseInt(message);
		if (isNaN(age) || age <= 0 || age >= 100) {
			ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 99).");
			return;
		}

		userStates[userId].age = age;

		await User.create({
			telegramId: userId,
			name: userStates[userId].name,
			age: userStates[userId].age,
		});

		ctx.reply(`–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –∏–º—è: ${userStates[userId].name}, –≤–∞–º: ${userStates[userId].age} –ª–µ—Ç. Good Luck!!!`);
		delete userStates[userId];
	}
});

// –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –∏–ª–∏ webhook –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.RENDER_DOMAIN) {
	// –ü—Ä–æ–¥–∞–∫—à–Ω: –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook
	const WEBHOOK_URL = `https://${process.env.RENDER_DOMAIN}/telegram-bot`;

	bot.telegram.setWebhook(WEBHOOK_URL);
	app.use(bot.webhookCallback("/telegram-bot"));

	const PORT = process.env.PORT || 3000;
	app.listen(PORT, () => {
		console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
		console.log(`ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook: ${WEBHOOK_URL}`);
	});
} else {
	// –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: polling
	bot.telegram.deleteWebhook();
	bot.launch();
	console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ polling");
}